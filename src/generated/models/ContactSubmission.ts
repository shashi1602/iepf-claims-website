
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ContactSubmission` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ContactSubmission
 * 
 */
export type ContactSubmissionModel = runtime.Types.Result.DefaultSelection<Prisma.$ContactSubmissionPayload>

export type AggregateContactSubmission = {
  _count: ContactSubmissionCountAggregateOutputType | null
  _avg: ContactSubmissionAvgAggregateOutputType | null
  _sum: ContactSubmissionSumAggregateOutputType | null
  _min: ContactSubmissionMinAggregateOutputType | null
  _max: ContactSubmissionMaxAggregateOutputType | null
}

export type ContactSubmissionAvgAggregateOutputType = {
  id: number | null
}

export type ContactSubmissionSumAggregateOutputType = {
  id: number | null
}

export type ContactSubmissionMinAggregateOutputType = {
  id: number | null
  name: string | null
  email: string | null
  message: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ContactSubmissionMaxAggregateOutputType = {
  id: number | null
  name: string | null
  email: string | null
  message: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ContactSubmissionCountAggregateOutputType = {
  id: number
  name: number
  email: number
  message: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ContactSubmissionAvgAggregateInputType = {
  id?: true
}

export type ContactSubmissionSumAggregateInputType = {
  id?: true
}

export type ContactSubmissionMinAggregateInputType = {
  id?: true
  name?: true
  email?: true
  message?: true
  createdAt?: true
  updatedAt?: true
}

export type ContactSubmissionMaxAggregateInputType = {
  id?: true
  name?: true
  email?: true
  message?: true
  createdAt?: true
  updatedAt?: true
}

export type ContactSubmissionCountAggregateInputType = {
  id?: true
  name?: true
  email?: true
  message?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ContactSubmissionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ContactSubmission to aggregate.
   */
  where?: Prisma.ContactSubmissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ContactSubmissions to fetch.
   */
  orderBy?: Prisma.ContactSubmissionOrderByWithRelationInput | Prisma.ContactSubmissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ContactSubmissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ContactSubmissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ContactSubmissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ContactSubmissions
  **/
  _count?: true | ContactSubmissionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ContactSubmissionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ContactSubmissionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ContactSubmissionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ContactSubmissionMaxAggregateInputType
}

export type GetContactSubmissionAggregateType<T extends ContactSubmissionAggregateArgs> = {
      [P in keyof T & keyof AggregateContactSubmission]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateContactSubmission[P]>
    : Prisma.GetScalarType<T[P], AggregateContactSubmission[P]>
}




export type ContactSubmissionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ContactSubmissionWhereInput
  orderBy?: Prisma.ContactSubmissionOrderByWithAggregationInput | Prisma.ContactSubmissionOrderByWithAggregationInput[]
  by: Prisma.ContactSubmissionScalarFieldEnum[] | Prisma.ContactSubmissionScalarFieldEnum
  having?: Prisma.ContactSubmissionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ContactSubmissionCountAggregateInputType | true
  _avg?: ContactSubmissionAvgAggregateInputType
  _sum?: ContactSubmissionSumAggregateInputType
  _min?: ContactSubmissionMinAggregateInputType
  _max?: ContactSubmissionMaxAggregateInputType
}

export type ContactSubmissionGroupByOutputType = {
  id: number
  name: string
  email: string
  message: string
  createdAt: Date
  updatedAt: Date
  _count: ContactSubmissionCountAggregateOutputType | null
  _avg: ContactSubmissionAvgAggregateOutputType | null
  _sum: ContactSubmissionSumAggregateOutputType | null
  _min: ContactSubmissionMinAggregateOutputType | null
  _max: ContactSubmissionMaxAggregateOutputType | null
}

type GetContactSubmissionGroupByPayload<T extends ContactSubmissionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ContactSubmissionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ContactSubmissionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ContactSubmissionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ContactSubmissionGroupByOutputType[P]>
      }
    >
  >



export type ContactSubmissionWhereInput = {
  AND?: Prisma.ContactSubmissionWhereInput | Prisma.ContactSubmissionWhereInput[]
  OR?: Prisma.ContactSubmissionWhereInput[]
  NOT?: Prisma.ContactSubmissionWhereInput | Prisma.ContactSubmissionWhereInput[]
  id?: Prisma.IntFilter<"ContactSubmission"> | number
  name?: Prisma.StringFilter<"ContactSubmission"> | string
  email?: Prisma.StringFilter<"ContactSubmission"> | string
  message?: Prisma.StringFilter<"ContactSubmission"> | string
  createdAt?: Prisma.DateTimeFilter<"ContactSubmission"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ContactSubmission"> | Date | string
}

export type ContactSubmissionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  message?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ContactSubmissionWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.ContactSubmissionWhereInput | Prisma.ContactSubmissionWhereInput[]
  OR?: Prisma.ContactSubmissionWhereInput[]
  NOT?: Prisma.ContactSubmissionWhereInput | Prisma.ContactSubmissionWhereInput[]
  name?: Prisma.StringFilter<"ContactSubmission"> | string
  email?: Prisma.StringFilter<"ContactSubmission"> | string
  message?: Prisma.StringFilter<"ContactSubmission"> | string
  createdAt?: Prisma.DateTimeFilter<"ContactSubmission"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ContactSubmission"> | Date | string
}, "id">

export type ContactSubmissionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  message?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ContactSubmissionCountOrderByAggregateInput
  _avg?: Prisma.ContactSubmissionAvgOrderByAggregateInput
  _max?: Prisma.ContactSubmissionMaxOrderByAggregateInput
  _min?: Prisma.ContactSubmissionMinOrderByAggregateInput
  _sum?: Prisma.ContactSubmissionSumOrderByAggregateInput
}

export type ContactSubmissionScalarWhereWithAggregatesInput = {
  AND?: Prisma.ContactSubmissionScalarWhereWithAggregatesInput | Prisma.ContactSubmissionScalarWhereWithAggregatesInput[]
  OR?: Prisma.ContactSubmissionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ContactSubmissionScalarWhereWithAggregatesInput | Prisma.ContactSubmissionScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"ContactSubmission"> | number
  name?: Prisma.StringWithAggregatesFilter<"ContactSubmission"> | string
  email?: Prisma.StringWithAggregatesFilter<"ContactSubmission"> | string
  message?: Prisma.StringWithAggregatesFilter<"ContactSubmission"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ContactSubmission"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ContactSubmission"> | Date | string
}

export type ContactSubmissionCreateInput = {
  name: string
  email: string
  message: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ContactSubmissionUncheckedCreateInput = {
  id?: number
  name: string
  email: string
  message: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ContactSubmissionUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ContactSubmissionUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ContactSubmissionCreateManyInput = {
  id?: number
  name: string
  email: string
  message: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ContactSubmissionUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ContactSubmissionUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ContactSubmissionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  message?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ContactSubmissionAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type ContactSubmissionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  message?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ContactSubmissionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  message?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ContactSubmissionSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type ContactSubmissionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  email?: boolean
  message?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["contactSubmission"]>

export type ContactSubmissionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  email?: boolean
  message?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["contactSubmission"]>

export type ContactSubmissionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  email?: boolean
  message?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["contactSubmission"]>

export type ContactSubmissionSelectScalar = {
  id?: boolean
  name?: boolean
  email?: boolean
  message?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ContactSubmissionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "email" | "message" | "createdAt" | "updatedAt", ExtArgs["result"]["contactSubmission"]>

export type $ContactSubmissionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ContactSubmission"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    email: string
    message: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["contactSubmission"]>
  composites: {}
}

export type ContactSubmissionGetPayload<S extends boolean | null | undefined | ContactSubmissionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ContactSubmissionPayload, S>

export type ContactSubmissionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ContactSubmissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ContactSubmissionCountAggregateInputType | true
  }

export interface ContactSubmissionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContactSubmission'], meta: { name: 'ContactSubmission' } }
  /**
   * Find zero or one ContactSubmission that matches the filter.
   * @param {ContactSubmissionFindUniqueArgs} args - Arguments to find a ContactSubmission
   * @example
   * // Get one ContactSubmission
   * const contactSubmission = await prisma.contactSubmission.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ContactSubmissionFindUniqueArgs>(args: Prisma.SelectSubset<T, ContactSubmissionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ContactSubmissionClient<runtime.Types.Result.GetResult<Prisma.$ContactSubmissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ContactSubmission that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ContactSubmissionFindUniqueOrThrowArgs} args - Arguments to find a ContactSubmission
   * @example
   * // Get one ContactSubmission
   * const contactSubmission = await prisma.contactSubmission.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ContactSubmissionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ContactSubmissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ContactSubmissionClient<runtime.Types.Result.GetResult<Prisma.$ContactSubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ContactSubmission that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactSubmissionFindFirstArgs} args - Arguments to find a ContactSubmission
   * @example
   * // Get one ContactSubmission
   * const contactSubmission = await prisma.contactSubmission.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ContactSubmissionFindFirstArgs>(args?: Prisma.SelectSubset<T, ContactSubmissionFindFirstArgs<ExtArgs>>): Prisma.Prisma__ContactSubmissionClient<runtime.Types.Result.GetResult<Prisma.$ContactSubmissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ContactSubmission that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactSubmissionFindFirstOrThrowArgs} args - Arguments to find a ContactSubmission
   * @example
   * // Get one ContactSubmission
   * const contactSubmission = await prisma.contactSubmission.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ContactSubmissionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ContactSubmissionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ContactSubmissionClient<runtime.Types.Result.GetResult<Prisma.$ContactSubmissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ContactSubmissions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactSubmissionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ContactSubmissions
   * const contactSubmissions = await prisma.contactSubmission.findMany()
   * 
   * // Get first 10 ContactSubmissions
   * const contactSubmissions = await prisma.contactSubmission.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const contactSubmissionWithIdOnly = await prisma.contactSubmission.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ContactSubmissionFindManyArgs>(args?: Prisma.SelectSubset<T, ContactSubmissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ContactSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ContactSubmission.
   * @param {ContactSubmissionCreateArgs} args - Arguments to create a ContactSubmission.
   * @example
   * // Create one ContactSubmission
   * const ContactSubmission = await prisma.contactSubmission.create({
   *   data: {
   *     // ... data to create a ContactSubmission
   *   }
   * })
   * 
   */
  create<T extends ContactSubmissionCreateArgs>(args: Prisma.SelectSubset<T, ContactSubmissionCreateArgs<ExtArgs>>): Prisma.Prisma__ContactSubmissionClient<runtime.Types.Result.GetResult<Prisma.$ContactSubmissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ContactSubmissions.
   * @param {ContactSubmissionCreateManyArgs} args - Arguments to create many ContactSubmissions.
   * @example
   * // Create many ContactSubmissions
   * const contactSubmission = await prisma.contactSubmission.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ContactSubmissionCreateManyArgs>(args?: Prisma.SelectSubset<T, ContactSubmissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ContactSubmissions and returns the data saved in the database.
   * @param {ContactSubmissionCreateManyAndReturnArgs} args - Arguments to create many ContactSubmissions.
   * @example
   * // Create many ContactSubmissions
   * const contactSubmission = await prisma.contactSubmission.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ContactSubmissions and only return the `id`
   * const contactSubmissionWithIdOnly = await prisma.contactSubmission.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ContactSubmissionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ContactSubmissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ContactSubmissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ContactSubmission.
   * @param {ContactSubmissionDeleteArgs} args - Arguments to delete one ContactSubmission.
   * @example
   * // Delete one ContactSubmission
   * const ContactSubmission = await prisma.contactSubmission.delete({
   *   where: {
   *     // ... filter to delete one ContactSubmission
   *   }
   * })
   * 
   */
  delete<T extends ContactSubmissionDeleteArgs>(args: Prisma.SelectSubset<T, ContactSubmissionDeleteArgs<ExtArgs>>): Prisma.Prisma__ContactSubmissionClient<runtime.Types.Result.GetResult<Prisma.$ContactSubmissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ContactSubmission.
   * @param {ContactSubmissionUpdateArgs} args - Arguments to update one ContactSubmission.
   * @example
   * // Update one ContactSubmission
   * const contactSubmission = await prisma.contactSubmission.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ContactSubmissionUpdateArgs>(args: Prisma.SelectSubset<T, ContactSubmissionUpdateArgs<ExtArgs>>): Prisma.Prisma__ContactSubmissionClient<runtime.Types.Result.GetResult<Prisma.$ContactSubmissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ContactSubmissions.
   * @param {ContactSubmissionDeleteManyArgs} args - Arguments to filter ContactSubmissions to delete.
   * @example
   * // Delete a few ContactSubmissions
   * const { count } = await prisma.contactSubmission.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ContactSubmissionDeleteManyArgs>(args?: Prisma.SelectSubset<T, ContactSubmissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ContactSubmissions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactSubmissionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ContactSubmissions
   * const contactSubmission = await prisma.contactSubmission.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ContactSubmissionUpdateManyArgs>(args: Prisma.SelectSubset<T, ContactSubmissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ContactSubmissions and returns the data updated in the database.
   * @param {ContactSubmissionUpdateManyAndReturnArgs} args - Arguments to update many ContactSubmissions.
   * @example
   * // Update many ContactSubmissions
   * const contactSubmission = await prisma.contactSubmission.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ContactSubmissions and only return the `id`
   * const contactSubmissionWithIdOnly = await prisma.contactSubmission.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ContactSubmissionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ContactSubmissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ContactSubmissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ContactSubmission.
   * @param {ContactSubmissionUpsertArgs} args - Arguments to update or create a ContactSubmission.
   * @example
   * // Update or create a ContactSubmission
   * const contactSubmission = await prisma.contactSubmission.upsert({
   *   create: {
   *     // ... data to create a ContactSubmission
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ContactSubmission we want to update
   *   }
   * })
   */
  upsert<T extends ContactSubmissionUpsertArgs>(args: Prisma.SelectSubset<T, ContactSubmissionUpsertArgs<ExtArgs>>): Prisma.Prisma__ContactSubmissionClient<runtime.Types.Result.GetResult<Prisma.$ContactSubmissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ContactSubmissions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactSubmissionCountArgs} args - Arguments to filter ContactSubmissions to count.
   * @example
   * // Count the number of ContactSubmissions
   * const count = await prisma.contactSubmission.count({
   *   where: {
   *     // ... the filter for the ContactSubmissions we want to count
   *   }
   * })
  **/
  count<T extends ContactSubmissionCountArgs>(
    args?: Prisma.Subset<T, ContactSubmissionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ContactSubmissionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ContactSubmission.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactSubmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ContactSubmissionAggregateArgs>(args: Prisma.Subset<T, ContactSubmissionAggregateArgs>): Prisma.PrismaPromise<GetContactSubmissionAggregateType<T>>

  /**
   * Group by ContactSubmission.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactSubmissionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ContactSubmissionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ContactSubmissionGroupByArgs['orderBy'] }
      : { orderBy?: ContactSubmissionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ContactSubmissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactSubmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ContactSubmission model
 */
readonly fields: ContactSubmissionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ContactSubmission.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ContactSubmissionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ContactSubmission model
 */
export interface ContactSubmissionFieldRefs {
  readonly id: Prisma.FieldRef<"ContactSubmission", 'Int'>
  readonly name: Prisma.FieldRef<"ContactSubmission", 'String'>
  readonly email: Prisma.FieldRef<"ContactSubmission", 'String'>
  readonly message: Prisma.FieldRef<"ContactSubmission", 'String'>
  readonly createdAt: Prisma.FieldRef<"ContactSubmission", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ContactSubmission", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ContactSubmission findUnique
 */
export type ContactSubmissionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContactSubmission
   */
  select?: Prisma.ContactSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContactSubmission
   */
  omit?: Prisma.ContactSubmissionOmit<ExtArgs> | null
  /**
   * Filter, which ContactSubmission to fetch.
   */
  where: Prisma.ContactSubmissionWhereUniqueInput
}

/**
 * ContactSubmission findUniqueOrThrow
 */
export type ContactSubmissionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContactSubmission
   */
  select?: Prisma.ContactSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContactSubmission
   */
  omit?: Prisma.ContactSubmissionOmit<ExtArgs> | null
  /**
   * Filter, which ContactSubmission to fetch.
   */
  where: Prisma.ContactSubmissionWhereUniqueInput
}

/**
 * ContactSubmission findFirst
 */
export type ContactSubmissionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContactSubmission
   */
  select?: Prisma.ContactSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContactSubmission
   */
  omit?: Prisma.ContactSubmissionOmit<ExtArgs> | null
  /**
   * Filter, which ContactSubmission to fetch.
   */
  where?: Prisma.ContactSubmissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ContactSubmissions to fetch.
   */
  orderBy?: Prisma.ContactSubmissionOrderByWithRelationInput | Prisma.ContactSubmissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ContactSubmissions.
   */
  cursor?: Prisma.ContactSubmissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ContactSubmissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ContactSubmissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ContactSubmissions.
   */
  distinct?: Prisma.ContactSubmissionScalarFieldEnum | Prisma.ContactSubmissionScalarFieldEnum[]
}

/**
 * ContactSubmission findFirstOrThrow
 */
export type ContactSubmissionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContactSubmission
   */
  select?: Prisma.ContactSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContactSubmission
   */
  omit?: Prisma.ContactSubmissionOmit<ExtArgs> | null
  /**
   * Filter, which ContactSubmission to fetch.
   */
  where?: Prisma.ContactSubmissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ContactSubmissions to fetch.
   */
  orderBy?: Prisma.ContactSubmissionOrderByWithRelationInput | Prisma.ContactSubmissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ContactSubmissions.
   */
  cursor?: Prisma.ContactSubmissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ContactSubmissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ContactSubmissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ContactSubmissions.
   */
  distinct?: Prisma.ContactSubmissionScalarFieldEnum | Prisma.ContactSubmissionScalarFieldEnum[]
}

/**
 * ContactSubmission findMany
 */
export type ContactSubmissionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContactSubmission
   */
  select?: Prisma.ContactSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContactSubmission
   */
  omit?: Prisma.ContactSubmissionOmit<ExtArgs> | null
  /**
   * Filter, which ContactSubmissions to fetch.
   */
  where?: Prisma.ContactSubmissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ContactSubmissions to fetch.
   */
  orderBy?: Prisma.ContactSubmissionOrderByWithRelationInput | Prisma.ContactSubmissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ContactSubmissions.
   */
  cursor?: Prisma.ContactSubmissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ContactSubmissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ContactSubmissions.
   */
  skip?: number
  distinct?: Prisma.ContactSubmissionScalarFieldEnum | Prisma.ContactSubmissionScalarFieldEnum[]
}

/**
 * ContactSubmission create
 */
export type ContactSubmissionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContactSubmission
   */
  select?: Prisma.ContactSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContactSubmission
   */
  omit?: Prisma.ContactSubmissionOmit<ExtArgs> | null
  /**
   * The data needed to create a ContactSubmission.
   */
  data: Prisma.XOR<Prisma.ContactSubmissionCreateInput, Prisma.ContactSubmissionUncheckedCreateInput>
}

/**
 * ContactSubmission createMany
 */
export type ContactSubmissionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ContactSubmissions.
   */
  data: Prisma.ContactSubmissionCreateManyInput | Prisma.ContactSubmissionCreateManyInput[]
}

/**
 * ContactSubmission createManyAndReturn
 */
export type ContactSubmissionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContactSubmission
   */
  select?: Prisma.ContactSubmissionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ContactSubmission
   */
  omit?: Prisma.ContactSubmissionOmit<ExtArgs> | null
  /**
   * The data used to create many ContactSubmissions.
   */
  data: Prisma.ContactSubmissionCreateManyInput | Prisma.ContactSubmissionCreateManyInput[]
}

/**
 * ContactSubmission update
 */
export type ContactSubmissionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContactSubmission
   */
  select?: Prisma.ContactSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContactSubmission
   */
  omit?: Prisma.ContactSubmissionOmit<ExtArgs> | null
  /**
   * The data needed to update a ContactSubmission.
   */
  data: Prisma.XOR<Prisma.ContactSubmissionUpdateInput, Prisma.ContactSubmissionUncheckedUpdateInput>
  /**
   * Choose, which ContactSubmission to update.
   */
  where: Prisma.ContactSubmissionWhereUniqueInput
}

/**
 * ContactSubmission updateMany
 */
export type ContactSubmissionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ContactSubmissions.
   */
  data: Prisma.XOR<Prisma.ContactSubmissionUpdateManyMutationInput, Prisma.ContactSubmissionUncheckedUpdateManyInput>
  /**
   * Filter which ContactSubmissions to update
   */
  where?: Prisma.ContactSubmissionWhereInput
  /**
   * Limit how many ContactSubmissions to update.
   */
  limit?: number
}

/**
 * ContactSubmission updateManyAndReturn
 */
export type ContactSubmissionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContactSubmission
   */
  select?: Prisma.ContactSubmissionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ContactSubmission
   */
  omit?: Prisma.ContactSubmissionOmit<ExtArgs> | null
  /**
   * The data used to update ContactSubmissions.
   */
  data: Prisma.XOR<Prisma.ContactSubmissionUpdateManyMutationInput, Prisma.ContactSubmissionUncheckedUpdateManyInput>
  /**
   * Filter which ContactSubmissions to update
   */
  where?: Prisma.ContactSubmissionWhereInput
  /**
   * Limit how many ContactSubmissions to update.
   */
  limit?: number
}

/**
 * ContactSubmission upsert
 */
export type ContactSubmissionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContactSubmission
   */
  select?: Prisma.ContactSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContactSubmission
   */
  omit?: Prisma.ContactSubmissionOmit<ExtArgs> | null
  /**
   * The filter to search for the ContactSubmission to update in case it exists.
   */
  where: Prisma.ContactSubmissionWhereUniqueInput
  /**
   * In case the ContactSubmission found by the `where` argument doesn't exist, create a new ContactSubmission with this data.
   */
  create: Prisma.XOR<Prisma.ContactSubmissionCreateInput, Prisma.ContactSubmissionUncheckedCreateInput>
  /**
   * In case the ContactSubmission was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ContactSubmissionUpdateInput, Prisma.ContactSubmissionUncheckedUpdateInput>
}

/**
 * ContactSubmission delete
 */
export type ContactSubmissionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContactSubmission
   */
  select?: Prisma.ContactSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContactSubmission
   */
  omit?: Prisma.ContactSubmissionOmit<ExtArgs> | null
  /**
   * Filter which ContactSubmission to delete.
   */
  where: Prisma.ContactSubmissionWhereUniqueInput
}

/**
 * ContactSubmission deleteMany
 */
export type ContactSubmissionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ContactSubmissions to delete
   */
  where?: Prisma.ContactSubmissionWhereInput
  /**
   * Limit how many ContactSubmissions to delete.
   */
  limit?: number
}

/**
 * ContactSubmission without action
 */
export type ContactSubmissionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContactSubmission
   */
  select?: Prisma.ContactSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContactSubmission
   */
  omit?: Prisma.ContactSubmissionOmit<ExtArgs> | null
}
